package main

// todo: https://unicode.org/emoji/charts/full-emoji-list.html contains more emojis
//       than https://unicode.org/Public/emoji/14.0/emoji-sequences.txt

import (
	"bufio"
	"flag"
	"log"
	"net/http"
	"os"
	"strings"
	"text/template"
)

var pkgName string
var fileName string

func init() {
	log.SetFlags(log.Llongfile)

	flag.StringVar(&pkgName, "pkg", "stringwidth", "output package")
	flag.StringVar(&fileName, "o", "../../emoji_sequence.go", "output file")
	flag.Parse()
}

const emojiSequence = "https://unicode.org/Public/emoji/14.0/emoji-sequences.txt"

var codeTemplate = `package {{ .PkgName }}

// Code generated by github.com/shibukawa/stringwidth/cmd/generator/main.go; DO NOT EDIT.

var emojiSequences = map[rune][][]rune{
{{range $key, $val := .CodeMap}}
  0x{{$key}}: {{$val}},{{end}}
}
`

type TemplateData struct {
	PkgName string
	CodeMap map[string]string
}

var v = map[int][][]int{
	0: {{1, 2, 3}, {4, 5, 6}},
}

func main() {
	r, err := http.Get(emojiSequence)
	if err != nil {
		panic(err)
	}
	defer r.Body.Close()
	rawSequences := make(map[string][]string)
	s := bufio.NewScanner(r.Body)
	for s.Scan() {
		line := s.Text()
		if len(line) < 3 {
			continue
		}
		if strings.HasPrefix(line, "#") {
			continue
		}
		codeStr, _, found := strings.Cut(line, ";")
		if !found {
			continue
		}
		if strings.Contains(codeStr, "..") {
			continue
		}
		codes := strings.Split(strings.TrimSpace(codeStr), " ")
		if len(codes) == 1 {
			continue
		}
		var b strings.Builder
		b.WriteString("{")
		for i, c := range codes[1:] {
			if i != 0 {
				b.WriteString(", ")
			}
			b.WriteString("0x")
			b.WriteString(c)
		}
		b.WriteString("}")
		rawSequences[codes[0]] = append(rawSequences[codes[0]], b.String())
	}
	sequence := make(map[string]string)
	for k, v := range rawSequences {
		sequence[k] = "{ " + strings.Join(v, ", ") + " }"
	}
	file, err := os.Create(fileName)
	if err != nil {
		panic(err)
	}
	defer file.Close()
	t := template.Must(template.New("template").Parse(codeTemplate))
	if err := t.Execute(file, TemplateData{PkgName: pkgName, CodeMap: sequence}); err != nil {
		panic(err)
	}
}
